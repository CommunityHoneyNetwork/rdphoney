---
stages:
  - test
  - build
  - integration_testing
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  ## Define two new variables based on GitLab's CI/CD predefined variables
  ## https://docs.gitlab.com/ee/ci/variables/#predefined-variables-environment-variables
  CI_APPLICATION_REPOSITORY: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG
  CI_APPLICATION_TAG: $CI_COMMIT_SHA

pep8:
  stage: test
  allow_failure: true
  tags:
    - linting

  before_script:
    - flake8 --version
  script:
    - flake8 .

build_container:
  stage: build
  tags: 
    - container_scanning
  services:
    - docker:stable-dind
  script:
    - sudo ntpdate pool.ntp.org
    - env
    - sudo docker login -u "gitlab-ci-token" -p "${CI_BUILD_TOKEN}" ${CI_REGISTRY}
    - sudo docker build --pull -t "${CI_APPLICATION_REPOSITORY}:${CI_APPLICATION_TAG}" .
    - sudo docker push "${CI_APPLICATION_REPOSITORY}:${CI_APPLICATION_TAG}"

# Disabled until we have some actual tests
.infra_testing:
  image: docker:stable
  stage: integration_testing
  services:
    - docker:stable-dind
  tags:
    - stingar
  script:
    - sudo ntpdate pool.ntp.org
    - sudo py.test .

container_scanning:
  image: docker:stable
  stage: integration_testing
  allow_failure: true
  services:
    - docker:stable-dind
  tags:
    - container_scanning
  script:
    - env
    - sudo docker pull ${CI_APPLICATION_REPOSITORY}:${CI_APPLICATION_TAG}
    - sudo docker run -d --name db arminc/clair-db:latest
    - sudo docker run -p 6060:6060 --link db:postgres -d --name clair --restart on-failure arminc/clair-local-scan:v2.0.5
    - sudo wget https://github.com/arminc/clair-scanner/releases/download/v8/clair-scanner_linux_amd64
    - sudo mv clair-scanner_linux_amd64 clair-scanner
    - sudo chmod +x clair-scanner
    - sudo touch clair-whitelist.yml
    - sudo docker ps
    - while( ! wget -O /dev/null http://127.0.0.1:6060/v1/namespaces ) ; do sleep 1 ; done
    - retries=0
    - echo "Waiting for clair daemon to start"
    - while( ! wget -T 10 -q -O /dev/null http://127.0.0.1:6060/v1/namespaces ) ; do sleep 1 ; echo -n "." ; if [ $retries -eq 10 ] ; then echo " Timeout, aborting." ; exit 1 ; fi ; retries=$(($retries+1)) ; done
    - sudo ./clair-scanner -c http://127.0.0.1:6060 --ip "$(hostname -I | awk '{print $1}')" -r gl-container-scanning-report.json -l clair.log -w clair-whitelist.yml ${CI_APPLICATION_REPOSITORY}:${CI_APPLICATION_TAG} || true
  artifacts:
    reports:
      container_scanning: 'gl-container-scanning-report.json'

deploy_dockerhub:
  image: docker:stable
  stage: deploy
  tags:
    - stingar
  only:
    - /(^v\d+(.\d+){1,2}$|^latest$)/
  script:
    - sudo docker login -u "gitlab-ci-token" -p "${CI_BUILD_TOKEN}" ${CI_REGISTRY}
    - sudo docker pull ${CI_APPLICATION_REPOSITORY}:${CI_APPLICATION_TAG}
    - sudo docker logout
    - export DOCKER_TAG=$(echo $CI_BUILD_REF_NAME | sed -E 's/^v?([[:digit:]]+(.[[:digit:]]+){1,2}|latest)$/\1/g')
    - export PROJECT_PATH=$(echo ${CI_PROJECT_PATH} | tr '[:upper:]' '[:lower:]')
    - env
    - echo docker tag ${CI_APPLICATION_REPOSITORY}:${CI_APPLICATION_TAG} ${PROJECT_PATH}:$DOCKER_TAG
    - sudo docker tag ${CI_APPLICATION_REPOSITORY}:${CI_APPLICATION_TAG} ${PROJECT_PATH}:$DOCKER_TAG
    - export VAULT_TOKEN=$(vault write -field=token auth/approle/login role_id=${VAULT_ROLE_ID} secret_id=${VAULT_SECRET_ID})
    - export DOCKER_USERNAME=$(vault read -field=username secret/stingar/dockerhub-account)
    - export DOCKER_PASSWORD=$(vault read -field=password secret/stingar/dockerhub-account)
    - sudo docker login -u "$DOCKER_USERNAME" --password "${DOCKER_PASSWORD}"
    - sudo docker push ${PROJECT_PATH}:$DOCKER_TAG
    - sudo docker logout
